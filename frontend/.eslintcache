[{"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/index.js":"1","/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/reportWebVitals.js":"2","/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/App.js":"3","/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/Header.tsx":"4","/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/Post.tsx":"5","/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/PostList.tsx":"6","/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/context/PostContext.tsx":"7"},{"size":154,"mtime":1608639955249,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1608638081180,"results":"10","hashOfConfig":"11"},{"size":719,"mtime":1608790345354,"results":"12","hashOfConfig":"9"},{"size":754,"mtime":1608792701747,"results":"13","hashOfConfig":"9"},{"size":193,"mtime":1608790383622,"results":"14","hashOfConfig":"9"},{"size":483,"mtime":1608792271122,"results":"15","hashOfConfig":"9"},{"size":963,"mtime":1608792315163,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1b95omd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1supq6f",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/index.js",[],["36","37"],"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/reportWebVitals.js",[],"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/App.js",[],"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/Header.tsx",["38","39","40","41"],"//rafce to create a functional component based on file name\nimport React from 'react';\nimport logo from '../assets/nh_logo.png';\n\nconst Header = () => {\n    return (\n        <div className=\"header-wrapper\">\n            <div className=\"logo-wrapper\">\n                <img src={logo} alt=\"November's Harvest Logo\"/>\n            </div>\n            <div className=\"links-wrapper\">\n                <a>Blog</a>\n                <a>About Us</a>\n                <a>CSA 2021</a>\n                <a>Events</a>\n            </div>\n        </div> \n    ) \n} \n\nexport default Header\n// create general type file that allows typescript to understand png, svg, jpg\n// create one main directory, can separate posts and users, and put the methods on how to access the server\n",["42","43"],"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/Post.tsx",[],["44","45"],"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/components/PostList.tsx",[],"/Users/rusticair-9/Desktop/coding/novembers_harvest/frontend/src/context/PostContext.tsx",["46"],"import * as React from 'react';\n\n//import React, { createContext, useState } from 'react';\n// import PostList from '../components/PostList';\n\nexport const PostContext = React.createContext()\n\nconst PostContextProvider: React.FC = (props) => {\n    const [posts, setPosts] = React.useState([\n        {   user: 1,\n            title: \"Test Title\",\n            text: \"test text\",\n            date: \"November 15, 1955\",\n            id: 1\n        },\n        {\n            user: 1,\n            title: \"Test Title2\",\n            text: \"test text2\",\n            date: \"November 15, 1956\",\n            id: 2\n        },\n        {\n            user: 1,\n            title: \"Test Title3\",\n            text: \"test text3\",\n            date: \"November 15, 1957\",\n            id: 3\n        }\n    ]);\n\n    return (\n        <PostContext.Provider value={{posts}}>\n            {props.children}\n        </PostContext.Provider>\n    )\n}\n// api in context\nexport default PostContextProvider;",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":12,"column":17,"nodeType":"53","endLine":12,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":13,"column":17,"nodeType":"53","endLine":13,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":14,"column":17,"nodeType":"53","endLine":14,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":15,"column":17,"nodeType":"53","endLine":15,"endColumn":20},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"54"},{"ruleId":"49","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":9,"column":19,"nodeType":"58","messageId":"59","endLine":9,"endColumn":27},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["60"],["61"],"@typescript-eslint/no-unused-vars","'setPosts' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]